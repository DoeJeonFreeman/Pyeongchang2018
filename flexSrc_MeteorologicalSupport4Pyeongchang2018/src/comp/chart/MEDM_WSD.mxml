<?xml version="1.0" encoding="utf-8"?>
<mx:CartesianChart xmlns:mx="http://www.adobe.com/2006/mxml" 
		width="100%" height="180" 
		gutterLeft="135" gutterRight="135"
		creationComplete="moveAxisLabel()" >
	<!--
	-->
	
	<mx:Script>
		<![CDATA[
			import asset.DFS.timeSeries.meteogram.style.ChartStyleAssets;
			
			import comp.chart.graphic.WindSymbol_small;
			
			import mx.charts.CategoryAxis;
			import mx.charts.LinearAxis;
			import mx.charts.chartClasses.CartesianCanvasValue;
			import mx.controls.Image;
			import mx.controls.Label;
			import mx.core.UIComponent;
			import mx.formatters.NumberFormatter;
			import mx.graphics.SolidColor;
			
			
			
			
			//ECMWF
			[Embed (source = "/asset/rasterGraphic/gridLines/UTC00_bg_odd/utc00_odd_100.png")] 
			public var UTC00_bg:Class; //ecmwwf 00utc ODD (dashedLine n shade)
			//ECMWF
			[Embed (source = "/asset/rasterGraphic/gridLines/UTC00_bg_even/utc00_even_100.png")] 
			public var UTC00_bg_even:Class; //ecmwf 00utc EVEN(dashedLine n shade)
			//ECMWF
			[Embed (source = "/asset/rasterGraphic/gridLines/UTC12_bg/utc12_100.png")] 
			public var UTC12_bg_ecmwf:Class; //ecmwf 12UTC dashedLine only
			
			//GDAPS			
			[Embed (source = "/asset/rasterGraphic/gridLines/UTC12_bg_279hrs/utc12_279hrs_100.png")] 
			public var UTC12_bg_dashed:Class;
			//GDAPS			
			[Embed (source = "/asset/rasterGraphic/gridLines/UTC00_bg_279hrs_odd/utc00_279hrs_odd_100.png")] 
			public var UTC00_bg_279hrs:Class;
			//GDAPS			
			[Embed (source = "/asset/rasterGraphic/gridLines/UTC00_bg_279hrs_even/utc00_279hrs_even_100.png")] 
			public var UTC00_bg_279hrs_even:Class;	
			
			
			
			[Embed(source='asset/DFS/timeSeries/meteogram/symbol/cloudCover/cc1.png')] private var clearSkies:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/symbol/cloudCover/cc2.png')] private var scatteredClouds:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/symbol/cloudCover/cc3.png')] private var brokenClouds:Class;
			[Embed(source='asset/DFS/timeSeries/meteogram/symbol/cloudCover/cc4.png')] private var overcast:Class;
			
			
			private function creationComplete():void{
				//				callLater(setCloudAmount);
			}
			
			[Bindable] public var stationNames:Array;
			
			public function drawWindSymbol():void{
				var drawVGap:uint = 7;
				var count:uint = 0;
				if(this.dataProvider != null){
					var stepper:int = 0;
					stationNames = new Array();
					for each(var ls:LineSeries in this.series){
						stationNames.push(ls.displayName);
						stepper++;
						for each(var item:XML in ls.dataProvider){
							if(!item.hasOwnProperty("@ws") || !item.hasOwnProperty("@wd")){
								continue;
							}
							var ws:Number =  item.@ws; 
							var wd:Number =  item.@wd - 90;
							var lst:String = item.@lst;
							
							var ui:UIComponent = new UIComponent();
							var windGraphic:WindSymbol_small = new WindSymbol_small(ws,  wd);
							ui.addChild(windGraphic);
							
							var currFormat:Object = new NumberFormatter();
							currFormat.precision = 1;
							currFormat.rounding = "nearest";
							
							var lbl_speed:Label = new Label();
							lbl_speed.width = 40;
							lbl_speed.truncateToFit = true;
							lbl_speed.setStyle("fontSize",12);
							lbl_speed.setStyle("textAlign","center");
							lbl_speed.text = currFormat.format(ws)+"";
							if(ws==0){
								lbl_speed.text = "Calm";
								canvas.addDataChild(lbl_speed, new CartesianCanvasValue(lst,-(lbl_speed.width / 2)) , new CartesianCanvasValue(2.5 +drawVGap*count,0));
								continue;
							}
							
							canvas.addDataChild(ui, lst, new CartesianCanvasValue(4+drawVGap*count,0)); //graphics
							canvas.addDataChild(lbl_speed, new CartesianCanvasValue(lst,-(lbl_speed.width / 2)) , new CartesianCanvasValue(2.5+drawVGap*count,0));
						}
						count++;
					}
				}
			}
			
			
			private function getWindDirectionStr(wd:int):String{
				var wdStr:String;
				
				if(11.25 <= wd && wd < 33.75){
					wdStr = "NNE";	
				}else if(33.75 <= wd && wd < 56.25){
					wdStr = "NE";
				}else if(56.25 <= wd && wd < 78.75){
					wdStr = "ENE";
				}else if(78.75 <= wd && wd < 101.25){
					wdStr = "E";
				}else if(101.25 <= wd && wd < 123.75){
					wdStr = "ESE";
				}else if(123.75 <= wd && wd < 146.25){
					wdStr = "SE";
				}else if(146.25 <= wd && wd < 168.75){
					wdStr = "SSE";
				}else if(168.75 <= wd && wd < 191.25){
					wdStr = "S";
				}else if(191.25 <= wd && wd < 213.75){
					wdStr = "SSW";
				}else if(213.75 <= wd && wd < 236.25){
					wdStr = "SW";
				}else if(236.25 <= wd && wd < 258.75){
					wdStr = "WSW";
				}else if(258.75 <= wd && wd < 281.25){
					wdStr = "W";
				}else if(281.25 <= wd && wd < 303.75){
					wdStr = "WNW";
				}else if(303.75 <= wd && wd < 326.25){
					wdStr = "NW";
				}else if(326.25 <= wd && wd < 348.75){
					wdStr = "NNW";
				}else if((348.75 <= wd && wd <= 360) || (0 <= wd && wd < 11.25)){
					wdStr = "N";
				}
				
				return wdStr; 
			} 		
			
			private function getwindSpeedUnitLabel(cat:Object, pcat:Object,ax:LinearAxis):String {
				return "m/s";
			} 	
			
			
			public function set00UTC_gridLines(isOddNum:Boolean,is279hrs:Boolean=false):void{
				if(isOddNum){
					var bgImg:Object = (is279hrs)? new UTC00_bg_279hrs_even() : new UTC00_bg_even() ;
				}else{
					var bgImg:Object = (is279hrs)? new UTC00_bg_279hrs() : new UTC00_bg() ;
				}
				bgImg.alpha = .9;	
				gridLine.setStyle("direction","horizontal");
				gridLine.setStyle("verticalTickAligned",true);
				gridLine.setStyle("horizontalStroke",ChartStyleAssets.glStroke_h2);
				gridLine.setStyle("horizontalChangeCount",2);
				this.backgroundElements=[bgImg,gridLine];
			}
			
			
			public function set12UTC_gridLines(isOddNum:Boolean = false,is279hrs:Boolean=false):void{
				gridLine.setStyle("horizontalStroke",ChartStyleAssets.glStroke_h_PTY);
				gridLine.setStyle("horizontalChangeCount",2);
				var sc_white:SolidColor = new SolidColor(0xFFFFFF,0.6);
				var sc_gray:SolidColor = new SolidColor(0xe4e4e4,0.6);
				gridLine.setStyle("direction","both");
				gridLine.setStyle("verticalFill",(isOddNum)? sc_white:sc_gray);
				gridLine.setStyle("verticalAlternateFill",(isOddNum)? sc_gray:sc_white);
				gridLine.setStyle("verticalChangeCount",2);
				gridLine.setStyle("verticalTickAligned",true);
				gridLine.setStyle("verticalStroke",ChartStyleAssets.glStroke_v2); 
				var bgImg:Object = (is279hrs)? new UTC12_bg_dashed() : new UTC12_bg_ecmwf();
				this.backgroundElements=[gridLine,bgImg];
			}
			
			
			public function defineLabel(cat:Object, pcat:Object, ax:CategoryAxis, labelItem:Object):String {
				var itm:XML = this.dataProvider[this.dataProvider.length-1];
				if(cat.toString().length > 4){
					if(itm.@lst==cat){
						return null;
					}else{
						return cat.toString().substring(0,2)+"."+cat.toString().substring(2,4);
					}
				}else{
					if(Number(cat.toString().substring(2,4))%6 !=0){
						return '';
					}
				}
				return cat+"";
			}
			
			
			public function defineLabel_00UTC(cat:Object, pcat:Object, ax:CategoryAxis, labelItem:Object):String {
				var itm:XML = this.dataProvider[this.dataProvider.length-1]; //00UTC일 경우 젤 마지막 레이블 튀어나와서 걍 짤랐심ㅠ 꼼수여
				if(itm.@lst==cat){
					return null;
				}else if(cat.toString().substring(4)=="00"){ // UTC
					return null;
				}else if(cat.toString().substring(4)=="09"){ // LST
					return null;
				}else{
					return cat.toString().substring(0,2)+"."+cat.toString().substring(2,4);
				}
			}
			
			private function defineVerticalLabel(cat:Object, pcat:Object,ax:LinearAxis):String {
				var str:String;
				if(cat == "3.5")str = stationNames[0];
				else if(cat == "10.5") str = stationNames[1];
				else if(cat == "17.5") str = stationNames[2];
				else if(cat == "24.5") str = stationNames[3];
				else if(cat == "31.5") str = stationNames[4];
				else if(cat == "38.5") str = stationNames[5];
				else if(cat == "45.5") str = stationNames[6];
				else if(cat == "52.5") str = stationNames[7];
				else if(cat == "59.5") str = stationNames[8];
				else if(cat == "66.5") str = stationNames[9];
				return str;
			}
			
			
			
			public function moveAxisRenderer(isMEDM:Boolean):void{
				if(isMEDM){
					moveAxisLabel();
				}else{
				}
			} 
			
			
			public function moveAxisLabel():void{
				trace('calllater:: moveAxisLabel')
				topAxisRenderer.move(topAxisRenderer.x-7,topAxisRenderer.y);
				topAxisRenderer.setStyle("labelAlign","right");
				bottomAxisRenderer.move(bottomAxisRenderer.x-7,bottomAxisRenderer.y);
				bottomAxisRenderer.setStyle("labelAlign","right");
			}
		]]>
	</mx:Script>
	
	<!-- cartesianDataCanvas -->
	<mx:annotationElements>
		<mx:CartesianDataCanvas id="canvas" includeInRanges="true" />
	</mx:annotationElements>
	
	<mx:backgroundElements>
		<mx:GridLines  id="gridLine"/>
	</mx:backgroundElements>
	
		
	
	<!-- axis renderering -->
	<mx:verticalAxisRenderers>
		<mx:AxisRenderer placement="left"  canDropLabels="false"
						 minorTickPlacement="none"  
						 tickPlacement="none" 
						 showLabels="true"
						 fontSize="12"
						 axis="{axis_ver}"   
						 axisStroke="{ChartStyleAssets.axisStroke}"
						 /> 
		
		<mx:AxisRenderer placement="right"  canDropLabels="false" 
						 minorTickPlacement="none"  
						 tickPlacement="none" 
						 showLabels="true"
						 fontSize="12"
						 axis="{axis_ver}"   
						 axisStroke="{ChartStyleAssets.axisStroke}"
						 />
	</mx:verticalAxisRenderers>
	<mx:horizontalAxisRenderers>
		<!--color="0x555555"-->
		<mx:AxisRenderer id="topAxisRenderer" 
						 showLabels="false" 
						 placement="top" 
						 canDropLabels="true"
						 tickPlacement="none" 
						 minorTickPlacement="none"   
						 fontSize="17"  fontWeight="bold"
						 axisStroke="{ChartStyleAssets.invisibleAxis}"  
						 axis="{axis_hor}"
						 labelAlign="right" 
						 />
		<mx:AxisRenderer id="topAxisRenderer2"
						 showLabels="false" 
						 placement="top" 
						 tickPlacement="none" 
						 minorTickPlacement="none"   
						 axisStroke="{ChartStyleAssets.axisStroke}" labelGap="-10"  
						 axis="{axis_hor}"
						 />
		<mx:AxisRenderer id="bottomAxisRenderer"
						 axis="{axis_hor}"
						 showLabels="false"
						 placement="bottom" 
						 canDropLabels="true"
						 tickPlacement="none" 
						 minorTickPlacement="none"  
						 fontSize="17" fontWeight="bold" 
						 axisStroke="{ChartStyleAssets.invisibleAxis}"
						 labelAlign="right"
						 />
		<mx:AxisRenderer id="bottomAxisRenderer2"
						 showLabels="false"
						 placement="bottom"  
						 canDropLabels="true"
						 tickPlacement="none" 
						 minorTickPlacement="none"  
						 fontSize="17" fontWeight="bold" 
						 axisStroke="{ChartStyleAssets.axisStroke}" labelGap="-10"
						 axis="{axis_hor}"
						 labelAlign="right"
						 />
	</mx:horizontalAxisRenderers>
	
	<mx:horizontalAxis>
		<mx:CategoryAxis id="axis_hor" categoryField="@lst"  labelFunction="defineLabel"/>
	</mx:horizontalAxis> 
	
	<mx:verticalAxis>
		<mx:LinearAxis id="axis_ver" 
					   minimum="0.01" maximum="28" interval="3.5"
					   labelFunction="defineVerticalLabel"
					   />
		<!-- minimum="0.01" maximum="21" interval="3.5"-->
		<!--	labelFunction="getwindSpeedUnitLabel" -->
	</mx:verticalAxis>
	
	<mx:series>
		<mx:LineSeries id="series_ecmw"  displayName="ECMWF"
					   xField="@lst" yField="@ws" visible="false" />
		<mx:LineSeries id="series_rdps"  displayName="RDPS"
					   xField="@lst" yField="@ws" visible="false" />
		<mx:LineSeries id="series_pmos"  displayName="PMOS"
					   xField="@lst" yField="@ws" visible="false" />
		<mx:LineSeries id="series_best"  displayName="BEST"
					   xField="@lst" yField="@ws" visible="false" />
	</mx:series>
</mx:CartesianChart>	    	
	