<?xml version="1.0" encoding="utf-8"?>
<mx:CartesianChart xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="200" 
	gutterLeft="35" gutterRight="35" 
	initialize="initTempChart()"
	showDataTips="true"   dataTipMode="multiple"  dataTipFunction="dataTipFunc"
	creationComplete="creationCompleteHandler()"
	
	>
	
	<mx:Script>
		<![CDATA[
			import asset.DFS.timeSeries.meteogram.style.ChartStyleAssets;
			
			import comp.util.common.CommonUtil;
			
			import mx.charts.HitData;
			import mx.charts.chartClasses.CartesianCanvasValue;
			import mx.charts.chartClasses.CartesianDataCanvas;
			import mx.charts.chartClasses.Series;
			import mx.charts.renderers.CircleItemRenderer;
			import mx.controls.Label;
			import mx.core.UIComponent;
			import mx.formatters.NumberFormatter;
			import mx.graphics.SolidColor;
			import mx.graphics.Stroke;
			
			
			
			//ECMWF
			[Embed (source = "/asset/rasterGraphic/gridLines/UTC00_bg_odd/utc00_odd_150.png")] 
			public var UTC00_bg:Class; //ecmwwf 00utc ODD (dashedLine n shade)
			//ECMWF
			[Embed (source = "/asset/rasterGraphic/gridLines/UTC00_bg_even/utc00_even_150.png")] 
			public var UTC00_bg_even:Class; //ecmwf 00utc EVEN(dashedLine n shade)
			//ECMWF
			[Embed (source = "/asset/rasterGraphic/gridLines/UTC12_bg/utc12_150.png")] 
			public var UTC12_bg_ecmwf:Class; //ecmwf 12UTC dashedLine only
			
			//GDAPS			
			[Embed (source = "/asset/rasterGraphic/gridLines/UTC12_bg_279hrs/utc12_279hrs_150.png")] 
			public var UTC12_bg_dashed:Class;
			//GDAPS			
			[Embed (source = "/asset/rasterGraphic/gridLines/UTC00_bg_279hrs_odd/utc00_279hrs_odd_145.png")] 
			public var UTC00_bg_279hrs:Class;
			//GDAPS			
			[Embed (source = "/asset/rasterGraphic/gridLines/UTC00_bg_279hrs_even/utc00_279hrs_even_145.png")] 
			public var UTC00_bg_279hrs_even:Class;	
			
			
			
			private function initTempChart(alphaVal:Number=1.0,circleRadius:Number=3):void{
				var allSeries:Array = this.series;
				for (var i:int=0; i<allSeries.length; i++) {
					var s:Series= allSeries[i];
					s.setStyle("lineStroke", new Stroke(CommonUtil.getInstance().seriesColorArr[i].color, 1, alphaVal ));  //circleitem line color
					s.setStyle("stroke", new Stroke(CommonUtil.getInstance().seriesColorArr[i].color, 2, alphaVal-0.2 ));  //circleitem line color
					//					s.setStyle("fill", CommonUtil.getInstance().seriesColorArr[i].color); 					//circleitem fill color
					s.setStyle("fill", 0xFFFFFF); 					//circleitem fill color
					s.setStyle("radius", circleRadius); 
					s.setStyle("itemRenderer", new ClassFactory(CircleItemRenderer)); 
				}
			}
			
			
			private function creationCompleteHandler():void{
				//				resetLinearAxisData();
				this.validateNow();
				moveAxisLabel();
			}
			
			private function resetLinearAxisData():void{
				axis_ver.maximum += Math.ceil(axis_ver.computedMaximum * 0.2);
				if(axis_ver.maximum > 6){
					axis_ver.interval =Math.ceil((axis_ver.maximum )/6);
				}else{
					axis_ver.interval = axis_ver.maximum / 6;
				}
				//				addAnnotationElements();
			}
			
			
			private function dataTipFunc(e:HitData):String {
				var s:String;
				var dateTime:String = Object(e.item).@lst;
				s = "<B>" + Object(e.element).displayName+'</B>\n'; 
				s +=  dateTime.substring(0,2) + '월 ' + dateTime.substring(2,4)+'일 '+dateTime.substring(4,6)+'시\n'; 
				s += "------------------\n";
				s += Object(e.item).@val + '%';
				return s;
			}   
			
			
			
			
			private var fractionFormatter:NumberFormatter;
			
			
			public function addAnnotationElements(currSeriesId:String,isVisible:Boolean):void{
				canvas.removeAllChildren();
				
				if(!isVisible){
					initTempChart(1,3);
					return;
				}else{
					initTempChart(0.4,0);
				}
				//				if(! CommonUtil.getInstance().isFileExist(parentApplication.mDictionary,currSeries.displayName)){
				//					return;
				//				}
				var allSeries:Array = this.series;
				
				var seriesIndex:uint = Number(currSeriesId.split('_')[1]);
				var currSeries:Series = this.series[seriesIndex];
				
				
				if(currSeries.dataProvider != null){
					//					currSeries.setStyle("fill", CommonUtil.getInstance().getStrokeColourByModelName(currSeries.id)); 					//circleitem fill color ffffff
					currSeries.setStyle("fill", CommonUtil.getInstance().seriesColorArr[seriesIndex].color); 					
					currSeries.setStyle("radius", 4); 
					currSeries.setStyle("itemRenderer", new ClassFactory(CircleItemRenderer)); 
					//					currSeries.setStyle('lineStroke',new Stroke( CommonUtil.getInstance().getStrokeColourByModelName(currSeries.id),2,1));
					currSeries.setStyle('lineStroke',new Stroke( CommonUtil.getInstance().seriesColorArr[seriesIndex].color,2,1));
					for each(var item:XML in currSeries.dataProvider){
						trace(item.toXMLString())
						if( ! item.hasOwnProperty("@val")){
							continue;
						}
						addLabelsToColumn(item["@lst"], item["@val"]);
					}
				}
			}
			
			//params lst:String, val:Number, minMaxFlag:String, minMaxVal:Number
			private function addLabelsToColumn(...params):void{
				var lst:String = params[0];
				var val:Number = params[1];					
				var lbl:Label = new Label();
				lbl.width = 40; lbl.height = 20;
				lbl.setStyle("fontSize","12");
				lbl.setStyle("textAlign","center");
				lbl.setStyle("paddingTop",-25);
				
				var currFormat:NumberFormatter = new NumberFormatter();
				currFormat.precision = 1;
				currFormat.rounding = "nearest";
				
				lbl.text =currFormat.format(val) + "";
				lbl.setActualSize(lbl.getExplicitOrMeasuredWidth(),lbl.getExplicitOrMeasuredHeight());	
				canvas.addDataChild(lbl, new CartesianCanvasValue(lst,-(lbl.width / 2)), val);
			}
			
			
			private function defineVerAxisLabel(cat:Object, pcat:Object,ax:LinearAxis):String {
				var str:String =(cat=="125") ?  "%" : cat+"";
				return str;
			}
			
			public function set00UTC_gridLines(isOddNum:Boolean,is279hrs:Boolean=false):void{
				if(isOddNum){
					var bgImg:Object = (is279hrs)? new UTC00_bg_279hrs_even() : new UTC00_bg_even() ;
				}else{
					var bgImg:Object = (is279hrs)? new UTC00_bg_279hrs() : new UTC00_bg() ;
				}
				
				bgImg.alpha = .9;	
				gridLine.setStyle("direction","horizontal");
				gridLine.setStyle("verticalTickAligned",true);
				gridLine.setStyle("horizontalStroke",ChartStyleAssets.glStroke_h2);
				this.backgroundElements=[bgImg,gridLine];
			}
			
			public function set12UTC_gridLines(isOddNum:Boolean,is279hrs:Boolean=false):void{
				gridLine.setStyle("horizontalStroke",ChartStyleAssets.glStroke_h);
				
				var sc_white:SolidColor = new SolidColor(0xFFFFFF,0.6);
				var sc_gray:SolidColor = new SolidColor(0xe4e4e4,0.6);
				gridLine.setStyle("direction","both");
				gridLine.setStyle("verticalFill",(isOddNum)? sc_white:sc_gray);
				gridLine.setStyle("verticalAlternateFill",(isOddNum)? sc_gray:sc_white);
				gridLine.setStyle("verticalChangeCount",2);
				gridLine.setStyle("verticalTickAligned",true);
				gridLine.setStyle("verticalStroke",ChartStyleAssets.glStroke_v2); 
				var bgImg:Object = (is279hrs)? new UTC12_bg_dashed() : new UTC12_bg_ecmwf();
				this.backgroundElements=[gridLine,bgImg];
			}
			
			
			public function defineLabel(cat:Object, pcat:Object, ax:CategoryAxis, labelItem:Object):String {
				var itm:XML = this.dataProvider[this.dataProvider.length-1];
				if(cat.toString().length > 4){
					if(itm.@lst==cat){
						//						Alert.show(cat.toString());
						return null;
					}else{
						return cat.toString().substring(0,2)+"."+cat.toString().substring(2,4);
					}
				}else{
					if(Number(cat.toString().substring(2,4))%6 !=0){
						return '';
					}
				}
				// Return the customized categoryField value:
				return cat+"";
			}
			
			
			
			public function defineLabel_00UTC(cat:Object, pcat:Object, ax:CategoryAxis, labelItem:Object):String {
				var itm:XML = this.dataProvider[this.dataProvider.length-1]; //00UTC일 경우 젤 마지막 레이블 튀어나와서 걍 짤랐심ㅠ 꼼수여
				if(itm.@lst==cat){
					return null;
				}else if(cat.toString().substring(4)=="00"){
					return null;
				}else{
					return cat.toString().substring(0,2)+"."+cat.toString().substring(2,4);
				}
			}
			
			public function moveAxisLabel():void{
				trace('calllater:: moveAxisLabel')
				topAxisRenderer.move(topAxisRenderer.x-3,topAxisRenderer.y);
				bottomAxisRenderer.move(bottomAxisRenderer.x-3,bottomAxisRenderer.y);
			}
			
		]]>
	</mx:Script>
	
	
	<!-- cartesianDataCanvas -->
	<mx:annotationElements>
		<mx:CartesianDataCanvas id="canvas" includeInRanges="true"/>
	</mx:annotationElements>
	
	<!-- GridLines.verticalTickAligned = false  -->
	
	
	
	<mx:backgroundElements>
		<mx:GridLines  id="gridLine" 
					   />
	</mx:backgroundElements>
	
	
	
	<!-- axis renderering -->
	<mx:verticalAxisRenderers>
		<mx:AxisRenderer placement="left" 
						 minorTickPlacement="none"  
						 tickPlacement="none" 
						 axis="{axis_ver}"   
						 axisStroke="{ChartStyleAssets.axisStroke}"
						 fontSize="11" 
						 /> 
		<mx:AxisRenderer placement="right" 
						 minorTickPlacement="none"  
						 tickPlacement="none" 
						 axis="{axis_ver}"  
						 axisStroke="{ChartStyleAssets.axisStroke}"
						 fontSize="11" 
						 />
	</mx:verticalAxisRenderers>
	<mx:horizontalAxisRenderers>
		<!--color="0x555555"-->
		<mx:AxisRenderer id="topAxisRenderer" 
						 showLabels="false" 
						 placement="top" 
						 canDropLabels="true"
						 tickPlacement="none" 
						 minorTickPlacement="none"   
						 fontSize="17"  fontWeight="bold"
						 axisStroke="{ChartStyleAssets.invisibleAxis}"  
						 axis="{axis_hor}"
						 labelAlign="right" 
						 />
		<mx:AxisRenderer id="topAxisRenderer2"
						 showLabels="false" 
						 canDropLabels="true"
						 placement="top" 
						 tickPlacement="none" 
						 minorTickPlacement="none"   
						 axisStroke="{ChartStyleAssets.axisStroke}" labelGap="-10"  
						 axis="{axis_hor}"
						 />
		<mx:AxisRenderer id="bottomAxisRenderer"
						 showLabels="false"
						 placement="bottom" 
						 canDropLabels="true"
						 tickPlacement="none" 
						 minorTickPlacement="none"  
						 fontSize="17" fontWeight="bold" 
						 axisStroke="{ChartStyleAssets.invisibleAxis}"
						 axis="{axis_hor}"
						 labelAlign="right"
						 />
		<mx:AxisRenderer id="bottomAxisRenderer2"
						 showLabels="false"
						 placement="bottom"  
						 canDropLabels="true"
						 tickPlacement="none" 
						 minorTickPlacement="none"  
						 fontSize="17" fontWeight="bold" 
						 axisStroke="{ChartStyleAssets.axisStroke}" labelGap="-10"
						 axis="{axis_hor}"
						 labelAlign="right"
						 />
	</mx:horizontalAxisRenderers>
	
	<mx:horizontalAxis>
		<mx:CategoryAxis id="axis_hor" categoryField="@lst"  labelFunction="defineLabel"/>
	</mx:horizontalAxis> 
	<mx:verticalAxis>
		<mx:LinearAxis id="axis_ver" baseAtZero="true" minimum="0" interval="25" maximum="125"  labelFunction="defineVerAxisLabel"
					   /><!--labelFunction="defineVerAxisLabel"-->
	</mx:verticalAxis>
	
	<!--drop the columnSeries shadow..-->
	<mx:seriesFilters>
		<mx:Array/>
	</mx:seriesFilters>
	
	
	<mx:series>
		<mx:Array/>
	</mx:series>
	
</mx:CartesianChart>
